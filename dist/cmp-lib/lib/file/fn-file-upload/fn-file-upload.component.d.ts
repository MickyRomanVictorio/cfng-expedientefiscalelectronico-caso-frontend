import { AfterViewInit, ElementRef, EventEmitter, NgZone, Renderer2 } from '@angular/core';
import { HttpClient, HttpHeaders } from "@angular/common/http";
import { FnIcon } from '../../shared/interfaces/fn-icon';
import { Message } from 'primeng/api';
import * as i0 from "@angular/core";
type FileType = 'image' | 'video' | 'audio' | 'document' | 'pdf' | 'excel' | 'all';
export declare class FnFileUploadComponent implements AfterViewInit {
    private http;
    zone: NgZone;
    private renderer;
    constructor(http: HttpClient, zone: NgZone, renderer: Renderer2);
    url: string;
    deleteURL: string;
    maxFileSize: number;
    label: string;
    type: FileType;
    fileLimit: number | undefined;
    headers: HttpHeaders;
    disabled: boolean;
    multiple: boolean | undefined;
    files: any[];
    perFileLabel: string;
    firstLabel: string;
    isAccumulated: boolean;
    isInMemory: boolean;
    sumSize: number;
    sumSizeChange: EventEmitter<number>;
    fileInput: ElementRef;
    content: ElementRef | undefined;
    isSignDigital: boolean;
    isSignMassive: boolean;
    dataDropDown: any;
    dataDropDownSelected: any;
    dataRadioButton: any;
    filesChange: EventEmitter<any>;
    processSignDocument: EventEmitter<any>;
    dragOverListener: VoidFunction | null | undefined;
    invalidFileLimitMessageSummary: string;
    invalidFileLimitMessageDetail: string;
    invalidFileSizeMessageSummary: string;
    invalidFileSizeMessageDetail: string;
    invalidFileTypeMessageSummary: string;
    invalidFileTypeMessageDetail: string;
    invalidmaxSizeLimitMessageSummary: string;
    invalidmaxSizeLimitMessageDetail: string;
    iFileUpload: FnIcon;
    iTrashCan: FnIcon;
    iFile: FnIcon;
    iEdit: FnIcon;
    iCheck: FnIcon;
    msgs: Message[];
    uploadingFile: boolean;
    private tmpFormData;
    get acceptedFiles(): string;
    get filesDescription(): string;
    get titleDocumentUpload(): string;
    get maxFileSizeDescription(): string;
    getFileSize(size: number): string;
    ngAfterViewInit(): void;
    getFileCategoryIcon(fileName: string): object;
    chooseFile(): void;
    onFileUpload(event: any): void;
    validate(file: File): boolean;
    private isFileTypeValid;
    getTypeClass(fileType: string): string;
    isWildcard(fileType: string): boolean;
    getFileExtension(file: File): string;
    isFileExists(file: File): boolean;
    onFileSelect(event: any): void;
    setFilesSaved(file: any, data: any): void;
    getCurrentSumSize(): void;
    showDocument(file: any): void;
    signDocument(file: any): boolean;
    onDragEnter(e: DragEvent): void;
    onDragOver(e: DragEvent): void;
    onDragLeave(event: DragEvent): void;
    onDrop(event: any): void;
    removeAttachment(file: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<FnFileUploadComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<FnFileUploadComponent, "fn-file-upload", never, { "url": { "alias": "url"; "required": false; }; "deleteURL": { "alias": "deleteURL"; "required": false; }; "maxFileSize": { "alias": "maxFileSize"; "required": false; }; "label": { "alias": "label"; "required": false; }; "type": { "alias": "type"; "required": false; }; "fileLimit": { "alias": "fileLimit"; "required": false; }; "headers": { "alias": "headers"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "files": { "alias": "files"; "required": false; }; "perFileLabel": { "alias": "perFileLabel"; "required": false; }; "firstLabel": { "alias": "firstLabel"; "required": false; }; "isAccumulated": { "alias": "isAccumulated"; "required": false; }; "isInMemory": { "alias": "isInMemory"; "required": false; }; "sumSize": { "alias": "sumSize"; "required": false; }; "isSignDigital": { "alias": "isSignDigital"; "required": false; }; "isSignMassive": { "alias": "isSignMassive"; "required": false; }; "dataDropDown": { "alias": "dataDropDown"; "required": false; }; "dataDropDownSelected": { "alias": "dataDropDownSelected"; "required": false; }; "dataRadioButton": { "alias": "dataRadioButton"; "required": false; }; }, { "sumSizeChange": "sumSizeChange"; "filesChange": "filesChange"; "processSignDocument": "processSignDocument"; }, never, never, false, never>;
}
export {};
