import { CONSULTA_CASO_RANGO_FECHA } from '../constant/constants-constant';
import { format, getHours, getMinutes } from 'date-fns';
import { es } from 'date-fns/locale';
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class DateUtil {
    constructor() {
        /**
        * Permite formatear una fecha en formato YYYY-MM-DD HH:mm:ss a una cadena en formato DD MM YYYY HH:mm a.m./p.m.
        * Ejemplo: 2023-05-15 14:30:00 a 15 May 2023 02:30 p.m.
        *
        * @param fechaHora
        * @returns string
        */
        this.formatearFechaHoraAbreviada = (fechaHora) => {
            if (fechaHora === null || fechaHora === undefined) {
                return '-';
            }
            const meses = ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct', 'Nov', 'Dic'];
            const fecha = new Date(fechaHora);
            if (isNaN(fecha.getTime())) {
                throw new Error(`Formato de fecha no válido: "${fechaHora}". Se esperaba un formato como 'YYYY-MM-DD' o 'YYYY-MM-DD HH:mm:ss'.`);
            }
            const dia = fecha.getDate().toString().padStart(2, '0');
            const mes = meses[fecha.getMonth()];
            const anio = fecha.getFullYear();
            const horas = fecha.getHours();
            const minutos = fecha.getMinutes().toString().padStart(2, '0');
            const periodo = horas >= 12 ? 'p.m.' : 'a.m.';
            const horasFormateadas = (horas % 12 || 12).toString().padStart(2, '0');
            if (fechaHora.length <= 10) {
                return `${dia} ${mes} ${anio}`;
            }
            return `${dia} ${mes} ${anio} ${horasFormateadas}:${minutos} ${periodo}`;
        };
    }
    // TODO: Ref cfng-core-lib - obtenerTiempoTranscurrido_DHS
    obtenerTiempoTranscurrido_DHS(fechaInicio) {
        const start = new Date(fechaInicio);
        const end = new Date();
        let difference = Math.abs(end.valueOf() - start.valueOf());
        let days = Math.floor(difference / (1000 * 60 * 60 * 24));
        let hours = Math.floor((difference % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        let minutes = Math.floor((difference % (1000 * 60 * 60)) / (1000 * 60));
        return days + 'd ' + hours + 'h ' + minutes + 'm';
    }
    // TODO: Ref cfng-core-lib - obtenerFormatoFecha_DDMMYYYY
    obtenerFormatoFecha_DDMMYYYY(date) {
        if (typeof date === 'string') {
            const partesFecha = date.split('/');
            const dia = parseInt(partesFecha[0], 10);
            const mes = parseInt(partesFecha[1], 10) - 1;
            const anio = parseInt(partesFecha[2], 10);
            date = new Date(dia, mes, anio);
        }
        if (!isNaN(date.getTime())) {
            const day = ("0" + date.getDate()).slice(-2);
            const month = ("0" + (date.getMonth() + 1)).slice(-2);
            const year = date.getFullYear();
            return `${day}/${month}/${year}`;
        }
        else {
            console.error('Formato de fecha inválida: :', date);
            return '-';
        }
    }
    // TODO: Ref cfng-core-lib - validarFormatoHora
    validarFormatoHora(event) {
        const code = (event.which) ? event.which : event.keyCode;
        if (code == 8) {
            return true;
        }
        else
            return code >= 48 && code <= 58;
    }
    // TODO: Ref cfng-core-lib - calcularDiasFecha
    calcularDiasFecha(date) {
        let dateArray = date.split("/");
        return (dateArray[0] * 1) + (dateArray[1] * 1) * 30 + (dateArray[2] * 1) * 360;
    }
    obtenerFormatoFechaFromDate_DDMMYYYY(fecha) {
        if (fecha !== undefined || fecha !== null) {
            let fe = new Date(fecha);
            const dia = fe.getDate();
            const mes = fe.getMonth() + 1;
            const anio = fe.getFullYear();
            const mesFormateado = mes < 10 ? `0${mes}` : mes.toString();
            const diaFormateado = dia < 10 ? `0${dia}` : dia.toString();
            const fechaFormateada = `${diaFormateado}/${mesFormateado}/${anio}`;
            return fechaFormateada;
        }
        else {
            return '-';
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: DateUtil, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: DateUtil, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: DateUtil, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });
export const formatDateToAbbreviated = (input) => {
    if (input === '' || input === undefined)
        return '';
    const months = {
        '01': 'Ene.',
        '02': 'Feb.',
        '03': 'Mar.',
        '04': 'Abr.',
        '05': 'May.',
        '06': 'Jun.',
        '07': 'Jul.',
        '08': 'Ago.',
        '09': 'Sep.',
        '10': 'Oct.',
        '11': 'Nov.',
        '12': 'Dic.',
    };
    const [day, month, year] = input.split('/');
    const formattedMonth = months[month];
    return `${parseInt(day)} ${formattedMonth} ${year}`;
};
export const convertTo12HourFormat = (input) => {
    if (input === '' || input === undefined)
        return '';
    const [hour, minutes] = input.split(':');
    const hourNum = parseInt(hour);
    const ampm = hourNum >= 12 ? 'p.m.' : 'a.m.';
    const hour12 = hourNum > 12 ? hourNum - 12 : hourNum === 0 ? 12 : hourNum;
    return `${hour12}:${minutes} ${ampm}`;
};
export const convertTo24HourFormat = (input) => {
    const [hours, minutes] = input.split(':').map(Number);
    const ampm = hours >= 12 ? 'p.m.' : 'a.m.';
    if (hours === 0 && minutes < 60) {
        return `${hours.toString().padStart(2, '0')}:${minutes
            .toString()
            .padStart(2, '0')} ${ampm}`;
    }
    let hours12 = hours % 12;
    hours12 = hours12 ? hours12 : 12;
    return `${hours12.toString().padStart(2, '0')}:${minutes
        .toString()
        .padStart(2, '0')} ${ampm}`;
};
export const obtenerFechaLetras = (fecha) => {
    const nombreDiaSemana = format(fecha, 'EEEE', { locale: es });
    const dia = format(fecha, 'd', { locale: es });
    const mes = format(fecha, 'MMMM', { locale: es });
    const anho = format(fecha, 'y', { locale: es });
    return `${nombreDiaSemana} ${dia} DE ${mes.toUpperCase()} DE ${anho}`?.toUpperCase();
};
export const obtenerHoraAMPM = (fecha) => {
    const hora = getHours(fecha);
    const minutos = getMinutes(fecha);
    const ampm = hora >= 12 ? 'P.M.' : 'A.M.';
    const hora12 = hora > 12 ? hora - 12 : hora === 0 ? 12 : hora;
    return `${hora12.toString().padStart(2, '0')}:${minutos
        .toString()
        .padStart(2, '0')} ${ampm}`;
};
export const getYYMMDDDashedToDDMMYYSlash = (dateStr) => {
    if (!dateStr)
        return null;
    const [year, month, day] = dateStr.split('-');
    return `${day}/${month}/${year}`;
};
export const obtenerFechaDDMMYYYY = (fecha) => {
    const dia = fecha.getDate().toString().padStart(2, '0');
    const mes = (fecha.getMonth() + 1).toString().padStart(2, '0');
    const anho = fecha.getFullYear();
    return `${dia}/${mes}/${anho}`;
};
export const obtenerFechaTipoDate = (fecha) => {
    const partes = fecha.split('/');
    const dia = parseInt(partes[0], 10);
    const mes = parseInt(partes[1], 10) - 1;
    const anho = parseInt(partes[2], 10);
    return new Date(anho, mes, dia);
};
export const obtenerHoraHH24MI = (fecha) => {
    const horas = fecha.getHours().toString().padStart(2, '0');
    const minutos = fecha.getMinutes().toString().padStart(2, '0');
    return `${horas}:${minutos}`;
};
export const obtenerHoraTipoDate = (hora) => {
    const [horas, minutos] = hora
        .split(':')
        .map((partes) => parseInt(partes, 10));
    const today = new Date();
    return new Date(today.getFullYear(), today.getMonth(), today.getDate(), horas, minutos);
};
const getLeadingZero = (number) => {
    return `${number < 10 ? '0' : ''}${number}`;
};
export const getDDMMYYSlashToDDMMYYDashed = (date = null) => {
    const today = date ? new Date(date) : new Date();
    const day = today.getDate();
    const month = today.getMonth() + 1;
    const year = today.getFullYear();
    return `${getLeadingZero(day)}-${getLeadingZero(month)}-${year}`;
};
export const calcularTiempoRestante = (fechaFinDetencion) => {
    const fechaFinTimestamp = new Date(fechaFinDetencion?.replace(/(\d{2})\/(\d{2})\/(\d{4})/, '$3-$2-$1')).getTime();
    const ahora = new Date().getTime();
    const tiempoRestanteMillis = fechaFinTimestamp - ahora;
    if (tiempoRestanteMillis <= 0) {
        return 'Completado';
    }
    const dias = Math.floor(tiempoRestanteMillis / (1000 * 60 * 60 * 24));
    const horas = Math.floor((tiempoRestanteMillis % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutos = Math.floor((tiempoRestanteMillis % (1000 * 60 * 60)) / (1000 * 60));
    const segundos = Math.floor((tiempoRestanteMillis % (1000 * 60)) / 1000);
    let tiempoRestante = '';
    if (dias > 0) {
        tiempoRestante += `${dias}d`;
    }
    if (horas > 0 && tiempoRestante?.split(' ').length < 2) {
        tiempoRestante += ` ${horas}h`;
    }
    if (minutos > 0 && tiempoRestante?.trim()?.split(' ').length < 2) {
        tiempoRestante += ` ${minutos}m`;
    }
    if (segundos > 0 && tiempoRestante?.trim()?.split(' ').length < 2) {
        tiempoRestante += ` ${segundos}s`;
    }
    return `${tiempoRestante?.trim() || '0s'} faltantes`;
};
export const string2DateReniec = (fechaReniec) => {
    const [dia, mes, anio] = fechaReniec.split('/');
    return new Date(+anio, +mes - 1, +dia);
};
export const obtenerFechaHoraDDMMYYYYHHMMA = (fecha) => {
    const dia = fecha.getDate().toString().padStart(2, '0');
    const mes = (fecha.getMonth() + 1).toString().padStart(2, '0');
    const anho = fecha.getFullYear();
    const horas = (fecha.getHours() % 12 || 12).toString().padStart(2, '0');
    const minutos = fecha.getMinutes().toString().padStart(2, '0');
    const ampm = fecha.getHours() >= 12 ? 'PM' : 'AM';
    return `${dia}/${mes}/${anho} ${horas}:${minutos} ${ampm}`;
};
export function dateTimeValidator(control) {
    const dateControl = control.get('fechaLlamada');
    const timeControl = control.get('horaLlamada');
    if (dateControl && timeControl && dateControl.value && timeControl.value) {
        const date = new Date(dateControl.value);
        const time = new Date(timeControl.value);
        date.setHours(time.getHours());
        date.setMinutes(time.getMinutes());
        // Current datetime for comparison
        const currentDateTime = new Date();
        if (date > currentDateTime) {
            // If the combined datetime is in the future, return an error
            return { invalidDateTime: true };
        }
    }
    return null; // If validation passes
    const inputDate = new Date(control.value);
    const currentDate = new Date();
    console.log(inputDate, currentDate, inputDate > currentDate);
    if (inputDate > currentDate) {
        return { futureDate: true };
    }
    return null;
}
export const obtenerTiempoTranscurrido = (fechaInicial) => {
    let timeAgo = '';
    const currentDate = new Date();
    const timeDifference = currentDate.getTime() - fechaInicial.getTime();
    const seconds = Math.floor(timeDifference / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);
    if (days > 0) {
        timeAgo = `hace ${days} día(s)`;
    }
    else if (hours > 0) {
        timeAgo = `hace ${hours} hora(s)`;
    }
    else if (minutes > 0) {
        timeAgo = `hace ${minutes} minuto(s)`;
    }
    else {
        timeAgo = `hace ${seconds} segundo(s)`;
    }
    return timeAgo;
};
/**
 * Valida el rango de fechas máximo 1 mes. Usado para los formularios reactivos
 *
 * @param group
 * @returns null | object
 */
export const validarRangoFechaForm = (group) => {
    const fechaDesde = group.get('fechaDesde')?.value;
    const fechaHasta = group.get('fechaHasta')?.value;
    if (!fechaDesde || !fechaHasta) {
        return null; // No validar si una de las fechas no está definida
    }
    const inicio = new Date(fechaDesde);
    const fin = new Date(fechaHasta);
    const hoy = new Date();
    if (!(fin <= hoy)) {
        return { rangoFechaInvalidoMax: true };
    }
    // Calcular la diferencia en meses y días
    const diferenciaMeses = fin.getMonth() -
        inicio.getMonth() +
        (fin.getFullYear() - inicio.getFullYear()) * 12;
    const diferenciaDias = fin.getDate() - inicio.getDate();
    // Verificar si la diferencia es exactamente un mes o menos
    const rangoValido = (diferenciaMeses === 1 && diferenciaDias <= 0) ||
        (diferenciaMeses === 0 && diferenciaDias >= 0);
    return rangoValido ? null : { rangoFechaInvalido: true };
};
/**
 * Valida el rango de fechas máximo 6 meses. Usado para los formularios reactivos
 *
 * @param group
 * @returns null | object
 */
export const validarRangoUltimo6MesesForm = (group) => {
    const fechaDesde = group.get('fechaDesde')?.value;
    const fechaHasta = group.get('fechaHasta')?.value;
    if (!fechaDesde || !fechaHasta) {
        return null; // No validar si una de las fechas no está definida
    }
    const inicio = new Date(fechaDesde);
    const fin = new Date(fechaHasta);
    const hoy = new Date();
    if (!(fin <= hoy)) {
        return { rangoFechaInvalidoMax: true };
    }
    // Calcular la diferencia en meses y días
    let diferenciaMeses = fin.getMonth() -
        inicio.getMonth() +
        (fin.getFullYear() - inicio.getFullYear()) * 12;
    let diferenciaDias = fin.getDate() - inicio.getDate();
    // Ajustar la diferencia de días si es negativa
    if (diferenciaDias < 0) {
        diferenciaMeses -= 1;
        diferenciaDias += 30;
    }
    // Verificar si la diferencia es de 6 meses o menos y los días no exceden el rango
    const rangoValido = diferenciaMeses < 6 || (diferenciaMeses === 6 && diferenciaDias <= 0);
    return rangoValido ? null : { rangoFechaInvalido: true };
};
export function rangoFechaXDefecto() {
    const meses = CONSULTA_CASO_RANGO_FECHA; /*Se resta 6 meses a la fecha actual */
    const fechaFin = new Date();
    const fechaInicio = new Date(fechaFin);
    const mesInicio = fechaInicio.getMonth();
    fechaInicio.setMonth(fechaFin.getMonth() - meses);
    // Ajuste para casos en los que restar meses cambie el año y cause un problema de desbordamiento
    if (fechaInicio.getMonth() !== (((mesInicio - meses) % 12) + 12) % 12) {
        fechaInicio.setDate(0); // Establece al último día del mes anterior
    }
    return {
        inicio: fechaInicio,
        fin: fechaFin,
    };
}
//# sourceMappingURL=data:application/json;base64,