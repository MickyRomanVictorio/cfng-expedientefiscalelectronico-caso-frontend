import { etapaInfo } from '../constant/menu-constant';
export const cleanEmptyFields = (object) => {
    const request = Object.fromEntries(Object.entries(object).filter(([_, valor]) => valor !== null && valor !== undefined && valor !== ''));
    return request;
};
export const obtenerCasoHtml = (numeroCaso) => {
    const caso = numeroCaso?.split('-');
    return `<span class="cfe-caso" style="white-space: nowrap">${caso[0]}-<span>${caso[1]}-${caso[2]}</span>-${caso[3]}</span>`;
};
export const obtenerRutaParaEtapa = (etapa) => {
    return etapaInfo(etapa).path;
};
export const obtenerTipoOpcionEtapa = (etapa) => {
    return etapaInfo(etapa).tipoOpcion;
};
export const urlEditarTramite = (tramite) => {
    return `app/administracion-casos/consultar-casos-fiscales/${obtenerRutaParaEtapa(tramite.idEtapa)}/caso/${tramite.idCaso}/acto-procesal/${tramite.idActoTramiteCaso}`;
};
export function limmpiarTildes(str) {
    return str.normalize('NFD').replaceAll(/[\u0300-\u036f]/g, '');
}
export const noQuotes = (event) => {
    const charCode = event.charCode || event.keyCode || 0;
    const key = String.fromCharCode(charCode);
    if (key === "'" || key === '"') {
        return false;
    }
    return true;
};
export const validOnlyNumbers = (event) => {
    const charCode = event.which ? event.which : event.keyCode;
    if (charCode > 31 && (charCode < 48 || charCode > 57)) {
        return false;
    }
    return true;
};
export const validLongitud = (event, maxLen) => {
    const input = event.target;
    const inputLength = input.value.length;
    const isArrowKey = event.key === 'ArrowRight' || event.key === 'ArrowLeft';
    const isBackspaceOrTab = event.key === 'Backspace' || event.key === 'Tab';
    const isDeleteKey = event.key === 'Delete';
    // Permitir Supr (Delete) independientemente de la longitud máxima
    if (isDeleteKey) {
        return;
    }
    if (!isArrowKey && inputLength >= maxLen && !isBackspaceOrTab) {
        event.preventDefault();
    }
};
export const validAlfanumerica = (event) => {
    const tecla = event.key;
    const esAlfanumerico = /^[a-zA-Z0-9]$/;
    if (!esAlfanumerico.test(tecla)) {
        event.preventDefault(); // Evita que se ingrese el carácter
    }
};
export const obtenerCodigoCasoHtml = (numeroCaso) => {
    const caso = numeroCaso?.split('-');
    return `<div class="cfe-caso">${caso[0]}-${caso[1]}-<span>${caso[2]}-${caso[3]}</span></div>`;
};
export const formatDate = (date) => {
    return date
        ? date.toLocaleDateString('es-ES', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
        })
        : '';
};
export const formatDatetime = (date) => {
    return date
        ? date.toLocaleDateString('es-ES', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit',
        })
        : '';
};
export const formatStringDatetime = (date, hour) => {
    const dateFormatted = date
        ? date.toLocaleDateString('es-ES', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
        })
        : '';
    const hourFormatted = hour
        ? `${hour.getHours().toString().padStart(2, '0')}:${hour
            .getMinutes()
            .toString()
            .padStart(2, '0')}`
        : '';
    const format = `${dateFormatted} ${hourFormatted}`;
    return format;
};
export const formatTime = (hour) => {
    const hourFormatted = hour
        ? `${hour.getHours().toString().padStart(2, '0')}:${hour
            .getMinutes()
            .toString()
            .padStart(2, '0')}:${hour.getSeconds().toString().padStart(2, '0')}`
        : '';
    return hourFormatted;
};
export const formatTimeHHMM = (hour) => {
    const hourFormatted = hour
        ? `${hour.getHours().toString().padStart(2, '0')}:${hour
            .getMinutes()
            .toString()
            .padStart(2, '0')}`
        : '';
    return hourFormatted;
};
export const getValidString = (value) => {
    return value !== null && value !== undefined
        ? String(value).trim() !== ''
            ? String(value).trim().toUpperCase()
            : null
        : null;
};
export const validText = (event, customPattern = /^[A-Za-zÁÉÍÓÚáéíóúñÑ ]+$/) => {
    const charCode = event.which ? event.which : event.keyCode;
    if (charCode == 8) {
        return true;
    }
    const pattern = customPattern;
    const character = String.fromCharCode(charCode);
    return pattern.test(character);
};
export const validOnlyTextOnPaste = (event) => {
    const clipboardData = event.clipboardData || window['clipboardData'];
    const pastedText = clipboardData.getData('text');
    const validText = pastedText.match(/[A-Za-zÁÉÍÓÚáéíóúñÑ ]+/g)?.join('');
    const newPastedText = validText ?? '';
    if (!/^[A-Za-zÁÉÍÓÚáéíóúñÑ ]+$/.test(pastedText)) {
        event.preventDefault();
        const element = event.target;
        if (element.isContentEditable) {
            const selection = window.getSelection();
            if (selection) {
                const range = selection.getRangeAt(0);
                range.deleteContents();
                range.insertNode(document.createTextNode(newPastedText));
            }
        }
        else {
            element.value = newPastedText;
            element.dispatchEvent(new Event('input'));
        }
    }
};
export const validOnlyNumberOnPaste = (event) => {
    const clipboardData = event.clipboardData || window['clipboardData'];
    const pastedText = clipboardData.getData('text');
    const numericText = pastedText.match(/\d+/g)?.join('');
    const newPastedText = numericText ?? '';
    if (!/^\d+$/.test(pastedText)) {
        event.preventDefault();
        const element = event.target;
        if (element.isContentEditable) {
            const selection = window.getSelection();
            if (selection) {
                const range = selection.getRangeAt(0);
                range.deleteContents();
                range.insertNode(document.createTextNode(newPastedText));
            }
        }
        else {
            element.value = newPastedText;
            element.dispatchEvent(new Event('input'));
        }
    }
};
export const validAlfanumericaOnPaste = (event) => {
    const textoPegado = event.clipboardData?.getData('text');
    const esAlfanumerico = /^[a-zA-Z0-9]*$/;
    if (textoPegado && !esAlfanumerico.test(textoPegado)) {
        event.preventDefault();
    }
};
export const formatDateText = (value) => {
    const [date, time] = value.split(' ');
    const [hour, minute] = time.split(':');
    let formattedHour = Number(hour);
    let meridiem = 'AM';
    if (formattedHour >= 12) {
        formattedHour = formattedHour % 12;
        meridiem = 'PM';
    }
    if (formattedHour === 0) {
        formattedHour = 12;
    }
    return `${date} a las ${formattedHour
        .toString()
        .padStart(2, '0')}:${minute} ${meridiem}`;
};
export const getDateFromString = (value) => {
    if (value === null)
        return null;
    const [day, month, year] = value.split('/').map(Number);
    const date = new Date(year, month - 1, day);
    return date;
};
export const formatDateString = (value) => {
    const [year, month, day] = value.split('-');
    const date = day + '/' + month + '/' + year;
    return date;
};
export const validateDateTime = (dateTimeString) => {
    const [dateComponents, timeComponents] = dateTimeString.split(' ');
    const [day, month, year] = dateComponents.split('/');
    const [hours, minutes, seconds] = timeComponents.split(':');
    const selectedDateTime = new Date(+year, +month - 1, +day, +hours, +minutes, +seconds);
    const currentDateTime = new Date();
    return selectedDateTime <= currentDateTime;
};
export function getCapitalized(text = '') {
    if (typeof text !== 'string') {
        return '';
    }
    const word = text.toLowerCase().split(' ');
    for (let i = 0; i < word.length; i++) {
        word[i] = word[i].charAt(0).toUpperCase() + word[i].slice(1);
    }
    return word.join(' ');
}
export function actualizarContadorInputTextArea(maximo, texto) {
    return 1000 - texto.length;
}
export default {
    getCapitalized,
};
//# sourceMappingURL=data:application/json;base64,