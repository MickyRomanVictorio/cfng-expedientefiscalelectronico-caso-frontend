import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class FileUtil {
    constructor() {
        this.base64ToFile = (base64String) => {
            const binaryData = atob(base64String);
            const array = new Uint8Array(binaryData.length);
            for (let i = 0; i < binaryData.length; i++) {
                array[i] = binaryData.charCodeAt(i);
            }
            const blob = new Blob([array], { type: 'application/octet-stream' });
            try {
                return new File([blob], `${new Date().getTime()}.pdf`, {
                    type: 'application/octet-stream',
                });
            }
            catch (e) {
                console.error('Error creating File:', e);
                return null;
            }
        };
        this.descargarArchivoB64 = (archivoB64, nombreArchivo) => {
            const caracteresBase64 = atob(archivoB64);
            const numerosBytes = new Array(caracteresBase64.length);
            for (let i = 0; i < caracteresBase64.length; i++) {
                numerosBytes[i] = caracteresBase64.charCodeAt(i);
            }
            const arregloBytes = new Uint8Array(numerosBytes);
            const archivo = new Blob([arregloBytes], { type: 'application/pdf' });
            const enlaceDescarga = document.createElement('a');
            enlaceDescarga.href = URL.createObjectURL(archivo);
            enlaceDescarga.download = `${nombreArchivo}.pdf`;
            document.body.appendChild(enlaceDescarga);
            enlaceDescarga.click();
            document.body.removeChild(enlaceDescarga);
        };
        this.archivoFileToB64 = async (archivo) => {
            return new Promise((resolve, reject) => {
                const reader = new FileReader();
                reader.readAsDataURL(archivo);
                reader.onload = () => {
                    const archivoB64 = reader.result;
                    resolve(archivoB64.replace('data:application/pdf;base64,', ''));
                };
                reader.onerror = () => {
                    reject('');
                };
            });
        };
        this.trustUrlB64 = (archivoB64) => {
            return `data:application/pdf;base64,${archivoB64}`;
        };
        this.onlyB64File = (trustArchivoB64) => {
            return trustArchivoB64.replace('data:application/pdf;base64,', '');
        };
        this.formatoPesoArchivo = (bytes, decimalPoint = 2) => {
            if (bytes == 0)
                return '0 Bytes';
            let k = 1024;
            let sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
            let i = Math.floor(Math.log(bytes) / Math.log(k));
            return (parseFloat((bytes / Math.pow(k, i)).toFixed(decimalPoint)) + ' ' + sizes[i]);
        };
        this.superaPesoPermitido = (archivo, persoPermitido) => {
            return (archivo.size > persoPermitido);
        };
        this.nombreArchivoExtenso = (archivo, longitudMaxima) => {
            return (archivo.name.length > longitudMaxima);
        };
        this.esExtensionValida = (archivo, extensionesPermitidas) => {
            let extensionArchivo = extensionesPermitidas.split(',').map((type) => type.trim());
            for (let type of extensionArchivo) {
                let acceptable = this.isWildcard(type) ?
                    this.getTypeClass(archivo.type) === this.getTypeClass(type) :
                    archivo.type == type || this.getFileExtension(archivo.name).toLowerCase() === type.toLowerCase();
                if (acceptable)
                    return true;
            }
            return false;
        };
    }
    getTypeClass(fileType) {
        return fileType.substring(0, fileType.indexOf('/'));
    }
    isWildcard(fileType) {
        return fileType.indexOf('*') !== -1;
    }
    getFileExtension(fileName) {
        return '.' + fileName.split('.').pop();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: FileUtil, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: FileUtil, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.1.0", ngImport: i0, type: FileUtil, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,